#version 460

#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_ray_tracing : enable
#extension GL_EXT_ray_query : enable

#include "common.glsl"

const int GROUP_SIZE = 16;
layout(local_size_x = GROUP_SIZE, local_size_y = GROUP_SIZE) in;
layout(set = 0, binding = 0, rgba32f) uniform image2D i_image;
layout(set = 0, binding = 1, r32f)    uniform image2D o_image;
layout(set = 0, binding = 2) uniform accelerationStructureEXT i_tlas;

layout(push_constant) uniform AoControl {
    float rtao_radius;
    int   rtao_samples;
    float rtao_power;
    int   rtao_distance_based;
    int   max_samples;
    int   frame_number;
} params;

float trace_ray(in rayQueryEXT rq, in vec3 origin, in vec3 direction)
{
    uint flags = gl_RayFlagsNoneEXT;
    if(params.rtao_distance_based == 0)
    {
        flags = gl_RayFlagsTerminateOnFirstHitEXT | gl_RayFlagsOpaqueEXT | gl_RayFlagsSkipClosestHitShaderEXT;
    }

    rayQueryInitializeEXT(rq, i_tlas, flags, 0xFF, origin, 0.0f, direction, params.rtao_radius);

    // Start traversal: return false if traversal is complete
    while(rayQueryProceedEXT(rq)) {}

    if(rayQueryGetIntersectionTypeEXT(rq, true) != gl_RayQueryCommittedIntersectionNoneEXT)
    {
        // Got an intersection == Shadow
        if(params.rtao_distance_based == 0)
        return 1;
        float length = 1 - (rayQueryGetIntersectionTEXT(rq, true) / params.rtao_radius);
        return length;  // * length;
    }

    return 0;
}

void main()
{
    float occlusion = 0.0;

    ivec2 size = imageSize(i_image);
    if (gl_GlobalInvocationID.x >= size.x || gl_GlobalInvocationID.y >= size.y)
    {
        return;
    }

    uint seed = tea(size.x * gl_GlobalInvocationID.y + gl_GlobalInvocationID.x, params.frame_number);

    vec4 g_buffer = imageLoad(i_image, ivec2(gl_GlobalInvocationID.xy));

    if (g_buffer != vec4(0))
    {
        vec3 origin = g_buffer.xyz;
        vec3 normal = decompress_uint_vec(floatBitsToUint(g_buffer.w));
        vec3 direction;

        origin = offset_ray(origin, normal);

        vec3 n, tangent, bitangent;
        compute_default_basis(normal, tangent, bitangent);

        for (int i = 0; i < params.rtao_samples; i++)
        {
            float r1 = rnd(seed);
            float r2 = rnd(seed);
            float sq = sqrt(1.0 - r2);
            float phi = 2 * M_PI * r1;
            vec3 direction = vec3(cos(phi) * sq, sin(phi) * sq, sqrt(r2));
            direction = direction.x * tangent + direction.y * bitangent + direction.z * normal;

            rayQueryEXT rq;
            occlusion += trace_ray(rq, origin, direction);
        }

        occlusion = 1 - (occlusion / params.rtao_samples);
        occlusion = pow(clamp(occlusion, 0, 1), params.rtao_power);
    }

    imageStore(o_image, ivec2(gl_GlobalInvocationID.xy), vec4(occlusion));

//    if (params.frame_number == 0)
//    {
//        imageStore(o_image, ivec2(gl_GlobalInvocationID.xy), vec4(occlusion));
//    }
//    else
//    {
//        float old_ao = imageLoad(o_image, ivec2(gl_GlobalInvocationID.xy)).x;
//        imageStore(o_image, ivec2(gl_GlobalInvocationID.xy), mix(old_ao, occlusion, 1.0f / float(params.frame_number + 1)));
//    }
}