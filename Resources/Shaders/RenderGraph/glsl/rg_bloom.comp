#version 460

struct BloomParams
{
    int   size;       // 5
    float separation; // 3
    float threshold;  // 0.4
    float amount;     // 1
};

layout (local_size_x = 16, local_size_y = 16) in;

layout (set = 0, binding = 0, rgba32f) uniform image2D     u_input_image;
layout (set = 0, binding = 1, rgba32f) uniform image2D     u_output_image;
layout (push_constant)                 uniform BloomPushConstant {
    BloomParams params;
} push_constant;

void main()
{
    ivec2 image_size  = imageSize(u_input_image);
    ivec2 pixel_coord = ivec2(gl_GlobalInvocationID.xy);

    float value = 0.0;
    float count = 0.0;

    vec4 result = vec4(0);
    vec4 color  = vec4(0);

    BloomParams params = push_constant.params;

    int size = params.size;
    for (int i = -size; i <= size; ++i)
    {
        for (int j = -size; j <= size; ++j)
        {
            ivec2 pixel = ivec2(pixel_coord + ivec2(i, j) * params.separation);

            color = imageLoad(u_input_image, pixel);
            value = max(color.r, max(color.g, color.b));

            if (value < params.threshold)
            {
                color = vec4(0);
            }

            result += color;
            count  += 1.0;
        }
    }

    result /= count;

    imageStore(
        u_output_image,
        pixel_coord,
        mix(vec4(0), result, params.amount));
}