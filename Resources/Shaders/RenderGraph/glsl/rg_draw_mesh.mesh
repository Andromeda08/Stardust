#version 460
#extension GL_EXT_mesh_shader : require
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_buffer_reference2 : require
#extension GL_EXT_scalar_block_layout : enable

struct CameraData {
    mat4 view;
    mat4 proj;
    mat4 view_inverse;
    mat4 proj_inverse;
    vec4 eye;
};

#define MAX_VERTICES 64
#define MAX_INDICES 126
struct Meshlet {
    uint vertex[MAX_VERTICES];
    uint index[MAX_INDICES];
    uint vertex_count;
    uint index_count;
};

struct Vertex {
    vec3 position;
    vec3 normal;
    vec2 uv;
};

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;
layout(triangles, max_vertices = MAX_VERTICES, max_primitives = MAX_INDICES / 3) out;

layout(push_constant) uniform PushConstant {
    mat4     model;
    vec4     color;
    uint64_t vertex_address;
    uint64_t meshlet_address;
    ivec4    shader_params;
} push_constant;

layout(binding = 0) uniform UniformBufferCamera {
    CameraData data;
    CameraData previous;
} camera;

layout(buffer_reference, scalar) buffer Meshlets { Meshlet meshlets[]; };
layout(buffer_reference, scalar) buffer Vertices { Vertex  vertices[]; };

layout(location = 0) out MeshOutput {
    vec4 meshlet_color;
    vec4 color;
    vec3 world_position;
    vec3 world_normal;
    vec2 uv;
    vec3 view_dir;
    vec4 current_position;
    vec4 previous_position;
    int  use_meshlet_color;
} m_out[];

const int MESHLET_COLOR_COUNT = 9;
const vec3 meshlet_colors[MESHLET_COLOR_COUNT] = {
    vec3(1,0,0), vec3(0,1,0), vec3(0,0,1), vec3(1,1,0), vec3(1,0,1),
    vec3(0,1,1), vec3(1,0.5,0), vec3(0.5,1,0), vec3(0,0.5,1)
};

const int CATP_MESHLET_COLOR_COUNT = 12;
const vec3 catp_meshlet_colors[CATP_MESHLET_COLOR_COUNT] = {
    vec3(234, 118, 203), vec3(136, 57, 239), vec3(210, 15, 57), vec3(230, 69, 83),
    vec3(254, 100, 11), vec3(223, 142, 29), vec3(223, 142, 29), vec3(64, 160, 43),
    vec3(23, 146, 153), vec3(32, 159, 181), vec3(30, 102, 245), vec3(144, 135, 253)
};

vec4 get_meshlet_color(uint i)
{
    return vec4(meshlet_colors[i % MESHLET_COLOR_COUNT], 1.0);
}

vec4 get_catp_meshlet_color(uint i)
{
    const uint idx = i % CATP_MESHLET_COLOR_COUNT;
    return vec4(catp_meshlet_colors[CATP_MESHLET_COLOR_COUNT - 1 - idx] / 255, 1.0);
}

void main()
{
    uint mi  = gl_LocalInvocationID.x;
    uint gid = gl_GlobalInvocationID.x;

    Meshlets _meshlets = Meshlets(push_constant.meshlet_address);
    Vertices _vertices = Vertices(push_constant.vertex_address);

    Meshlet meshlet = _meshlets.meshlets[gid];

    const uint primitive_count = uint(meshlet.index_count) / 3;
    SetMeshOutputsEXT(meshlet.vertex_count, primitive_count);

    for (uint i = 0; i < meshlet.vertex_count; i++)
    {
        uint vi = meshlet.vertex[i];
        Vertex vertex = _vertices.vertices[vi];

        vec3 origin = vec3(camera.data.view_inverse * vec4(0, 0, 0, 1));
        vec4 current_world_position = push_constant.model * vec4(vertex.position, 1.0);

        gl_MeshVerticesEXT[i].gl_Position = camera.data.proj * camera.data.view * current_world_position;

        m_out[i].meshlet_color     = get_catp_meshlet_color(gid);
        m_out[i].color             = push_constant.color;
        m_out[i].world_position    = current_world_position.xyz;
        m_out[i].world_normal      = mat3(push_constant.model) * vertex.normal;
        m_out[i].uv                = vertex.uv;
        m_out[i].view_dir          = vec3(current_world_position.xyz - origin);
        m_out[i].current_position  = camera.data.proj * camera.data.view * current_world_position;
        m_out[i].previous_position = camera.previous.proj * camera.previous.view * push_constant.model * vec4(vertex.position, 1.0);
        m_out[i].use_meshlet_color = push_constant.shader_params[0];
    }

    uint primitive = 0;
    for (uint i = 0; i < meshlet.index_count; i += 3)
    {
        gl_PrimitiveTriangleIndicesEXT[primitive] = uvec3(meshlet.index[i + 0], meshlet.index[i + 1], meshlet.index[i + 2]);
        primitive++;
    }
}
