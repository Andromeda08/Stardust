#version 460

layout (local_size_x = 16, local_size_y = 16) in;
layout (set = 0, binding = 0, rgba32f) uniform image2D uInputImage;
layout (set = 0, binding = 1, rgba32f) uniform image2D uOutputImage;

layout (push_constant) uniform PushConstant {
    ivec4 uDirectionVector;
} pc;

const int M = 16;
const int N = 2 * M + 1;

// Generated kernel coeffiecients, sigma = 10
const float coeffs[N] = float[N](
    0.012318109844189502,
    0.014381474814203989,
    0.016623532195728208,
    0.019024086115486723,
    0.02155484948872149,
    0.02417948052890078,
    0.02685404941667096,
    0.0295279624870386,
    0.03214534135442581,
    0.03464682117793548,
    0.0369716985390341,
    0.039060328279673276,
    0.040856643282313365,
    0.04231065439216247,
    0.043380781642569775,
    0.044035873841196206,
    0.04425662519949865,
    0.044035873841196206,
    0.043380781642569775,
    0.04231065439216247,
    0.040856643282313365,
    0.039060328279673276,
    0.0369716985390341,
    0.03464682117793548,
    0.03214534135442581,
    0.0295279624870386,
    0.02685404941667096,
    0.02417948052890078,
    0.02155484948872149,
    0.019024086115486723,
    0.016623532195728208,
    0.014381474814203989,
    0.012318109844189502
);

void main()
{
    ivec2 size = imageSize(uInputImage);
    ivec2 pixel_coord = ivec2(gl_GlobalInvocationID.xy);
    const ivec2 direction = pc.uDirectionVector.xy;

    if (pixel_coord.x < size.x && pixel_coord.y < size.y)
    {
        vec4 sum = vec4(0.0);

        for (int i = 0; i < N; ++i)
        {
            ivec2 pc = pixel_coord + direction * (i - M);
            if (pc.x < 0) pc.x = 0;
            if (pc.y < 0) pc.y = 0;
            if (pc.x >= size.x) pc.x = size.x - 1;
            if (pc.y >= size.y) pc.y = size.y - 1;

            sum += coeffs[i] * imageLoad(uInputImage, pc);
        }

        imageStore(uOutputImage, pixel_coord, sum);
    }
}
