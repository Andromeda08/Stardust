#version 460

#extension GL_EXT_ray_tracing : require
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require

#include "rtcommon.glsl"

layout(binding = 0, set = 0) uniform accelerationStructureEXT topLevelAS;
layout(binding = 1, set = 0, rgba32f) uniform image2D image;
layout(binding = 2, set = 0) uniform UBO {
    mat4 viewProjection;
    mat4 viewInverse;
    mat4 projInverse;
} uni;

layout (location = 0) rayPayloadEXT HitPayload prd;

void main() 
{
    const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
    const vec2 inUV = pixelCenter/vec2(gl_LaunchSizeEXT.xy);
    vec2 d = inUV * 2.0 - 1.0;

    vec4 origin    = uni.viewInverse * vec4(0, 0, 0, 1);
    vec4 target    = uni.projInverse * vec4(d.x, d.y, 1, 1);
    vec4 direction = uni.viewInverse * vec4(normalize(target.xyz), 0);

    uint  ray_flags = gl_RayFlagsOpaqueEXT;
    float tMin      = 0.001;
    float tMax      = 10000.0;

    prd.depth       = 0;
    prd.hit_value   = vec3(0);
    prd.attenuation = vec3(1.0, 1.0, 1.0);
    prd.done        = 1;
    prd.ray_origin  = origin.xyz;
    prd.ray_dir     = direction.xyz;

    vec3 hit_value = vec3(0);
    for (;;)
    {
        traceRayEXT(topLevelAS,
                    ray_flags,
                    0xFF,                // cullMask
                    0,                  // sbtRecordOffset
                    0,                  // sbtRecordStride
                    0,                  // missIndex
                    prd.ray_origin.xyz,
                    tMin,
                    prd.ray_dir.xyz,
                    tMax,
                    0                   // payload (location = 0)
        );

        hit_value += prd.hit_value * prd.attenuation;

        prd.depth++;

        if (prd.done == 1 || prd.depth >= 10) break;

        origin.xyz    = prd.ray_origin;
        direction.xyz = prd.ray_dir;

        prd.done      = 1;
    }

    imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(hit_value, 1.0));
}
